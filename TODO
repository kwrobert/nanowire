Code
====

1) Fix simulation subproccesing in sim_wrapper so we get output/feedback from S4 library when
   verbosity > 1
2) Fix automatic post processing so we get feedback to stdout as well as logs
3) Add error checking of plane values in setup.ini to make sure they do not exceed number of samples
4) P̶a̶r̶a̶l̶l̶e̶l̶i̶z̶e̶ ̶p̶o̶s̶t̶p̶r̶o̶c̶e̶s̶s̶i̶n̶g̶
   a) See commit message for commit dbc074a4ca8f342a79dc8c9982426bab00492b11  
5) Add capability to look up minimum number of basis terms to sim_wrapper or a̶d̶a̶p̶a̶t̶i̶v̶e̶l̶y̶ ̶c̶o̶n̶v̶e̶r̶g̶e̶
 ̶ ̶ ̶g̶i̶v̶e̶n̶ ̶s̶o̶m̶e̶ ̶b̶a̶s̶e̶ ̶n̶u̶m̶b̶e̶r̶ ̶o̶f̶ ̶t̶e̶r̶m̶s̶.  
    a) Will need to create a database. Store number of basis terms for each combination of
       frequency and some reasonable number of geometric parameters. 
5) Fix comsol_compare.py so it grabs quantities by column header 
6) Begin working on interface code to Sentaurus/Electrical Sims. This involves:
   a) Averaging over frequency to get average generation rate
   b) Initiating Sentaurus to get the mesh it builds
   b) Interpolating regular S4 grid onto Sentaurus mesh
   c) Building out Sentaurus config files
7) Add counter to simulation sweeps so we know how many are left to run 
10) Maybe someday create a Java CLI program that wraps COMSOL nanowire model. 
11) Need to add function to processors that extract all params and their values from the master
    config file and stores then in a dictionary as an attribute. Allows us to plot different combos
    of parameters with ease. Ex: sweep thru period, frequency, and basis terms. Plot run time of 220
    basis term sim for all frequencies at each period and store at the period node. 
12) Add functions that collect/return sims based on some criteria. Ex: Collect all sims with specific 
    frequency. Return all sims with particular system params. 
    a) collect_all(),collect_by_param,get_all,get_by_param
13) Port some of the logic in sim_wrapper to lua. This will allow us to perhaps reuse solutions
    a) This will only be a useful task if we can confirm that S4 will resuse the results of previous
       computations when some parameter is changed. This is possible when:
       I) Updating the number of basis terms. S4 still have to compute the solution but it reuses
          the solution to the eigensystem and whatnot. So this is great news, as we can do adaptive
          convergence in lua. 
          i) THIS DOESN'T SEEM TO WORK. OUTPUT FILE CONTAINS NAN'S WHEN JUST UPDATING NUMBER OF
             BASIS TERMS. NEED TO RESET EXCITATION AND FREQUENCY WHICH CAUSES THE ENTIRE SOLUTION TO 
             BE RECOMPUTED
       II) Updating layer thicknesses. The solution is analytic in z, so basically nothing needs to
           be recomputed. There is a specific function in S4 for updating layer thicknesses. 
14) Fix drawing feature in 2D plots so it shifts the lines for the nanowire depending on which z cut
    plane you are at. Right now it draws te lines for the nanowire as if it were on the the plane
    that cuts through the center of the x-y plane 
15) Add config params to 

Reading
=======

1) R̶e̶a̶d̶ ̶R̶a̶y̶s̶ ̶p̶a̶p̶e̶r̶ ̶a̶n̶d̶ ̶i̶d̶e̶n̶t̶i̶f̶y̶ ̶a̶n̶y̶ ̶g̶a̶p̶s̶ ̶i̶n̶ ̶t̶h̶e̶i̶r̶ ̶o̶p̶t̶i̶m̶i̶z̶a̶t̶i̶o̶n̶ ̶t̶h̶a̶t̶ ̶w̶e̶ ̶c̶o̶u̶l̶d̶ ̶f̶i̶l̶l̶
    a) Notes in Zotero
2) F̶i̶n̶d̶/̶a̶s̶k̶ ̶f̶o̶r̶ ̶g̶e̶n̶e̶r̶a̶t̶i̶o̶n̶ ̶r̶a̶t̶e̶ ̶d̶o̶c̶u̶m̶e̶n̶t̶ ̶A̶n̶n̶a̶ ̶m̶a̶d̶e̶ ̶a̶n̶d̶ ̶r̶e̶a̶d̶ ̶i̶t̶
    a) Handwritten notes up on Dropbox. Kind of a mess. Will need to decrpypt it in the future
3) Genetic algorithm book that I downloaded. Should be somewhere in papers/  
4) Software design patterns book. Stored in zotero. 

Simulation and Data Analysis
============================

1) Run a full convergence analysis for different system sizes
    a) p̶e̶r̶i̶o̶d̶ ̶2̶0̶0̶ ̶n̶m̶,̶ ̶r̶a̶d̶i̶u̶s̶ ̶7̶5̶
    b) p̶e̶r̶i̶o̶d̶ ̶3̶0̶0̶ ̶n̶m̶,̶ ̶r̶a̶d̶i̶u̶s̶ ̶6̶0̶
    c) N̶e̶e̶d̶ ̶t̶o̶ ̶f̶i̶n̶d̶ ̶s̶i̶m̶s̶ ̶t̶h̶a̶t̶ ̶f̶a̶i̶l̶e̶d̶,̶ ̶r̶e̶-̶r̶u̶n̶,̶ ̶t̶h̶e̶n̶ ̶c̶o̶m̶p̶l̶e̶t̶e̶ ̶p̶o̶s̶t̶p̶r̶o̶c̶e̶s̶s̶i̶n̶g̶ ̶
        i) All failed simulations are running or complete 
2) Run simulation with fixed total nanowire radius, but vary ratio between shell thickness
   and core radius 
   
Documentation
=============

1) Read up on AsciiDoc/AsciiDoctor and begin outline for documentation. Get
   Asciidoc syntax highlighter and other Asciidoc plugins.

Other
=====

1) Investigate Ctrl-Space,CtrlP, and ag (the silver surfer) plugins for VIM.
2) Read docs for Syntastic to find better settings.  
3) Read docs for Vimtex to find better settings
4) Investigate VIM snippets (UltiSnippets). A way of doing a bunch of commands
   (like adding that annoying namespace wrapper in python scripts, or setting up
   the Argparse boilerplace in python). 

   
