#!/usr/bin/env python

import os
import argparse as ap
from nanowire.optics.simulate import SimulationManager, run_sim, update_sim
from nanowire.optics.utils.config import Config

def run_optics():

    parser = ap.ArgumentParser(description="""A wrapper around s4_sim.py to automate parameter
            sweeps, optimization, directory organization, postproccessing, etc.""")
    parser.add_argument('config_file', type=str, help="""Absolute path to the INI file
    specifying how you want this wrapper to behave""")
    parser.add_argument('--log_level', type=str, default='info',
                        choices=['debug', 'info', 'warning', 'error', 'critical'],
                        help="""Logging level for the run""")
    parser.add_argument('-s', '--single', action='store_true', default=False,
                        help="The input config file should be treated as the "
                             "config file for a single simulation, and run "
                             "accordingly ")
    parser.add_argument('-u', '--update', action='store_true',
                        help="Update the electric field arrays with new "
                             "z samples without overwriting the old data. Can "
                             "only upate the sampling in z because there is "
                             "no way to update in x-y without destroying the "
                             "regularity of the grid")
    args = parser.parse_args()

    if not os.path.isfile(args.config_file):
        print("\n The file you specified does not exist! \n")
        quit()

    if args.single:
        conf = Config(path=args.config_file)
        run_sim(conf)
    elif args.update:
        manager = SimulationManager(args.config_file, log_level=args.log_level)
        samps = [manager.gconf['General']['{}_samples'.format(s)] for s in
                 ('x', 'y', 'z')] 
        manager.run(func=update_sim, load=True)
    else:
        manager = SimulationManager(args.config_file, log_level=args.log_level)
        manager.run()


if __name__ == '__main__':
    run_optics()
